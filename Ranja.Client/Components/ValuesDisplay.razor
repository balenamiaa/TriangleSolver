@inject IJSRuntime JSRuntime
@using Ranja.Client.Models

<div class="values-display space-y-4" @ref="containerElement">
    @if (AngleValues.Any())
    {
        <div class="angles-section">
            <h4 class="text-sm font-semibold mb-3 flex items-center" style="color: var(--text-secondary);">
                <svg class="w-4 h-4 mr-2" style="color: var(--accent-primary);" fill="none" stroke="currentColor"
                     viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
                Angles
            </h4>
            <div class="space-y-2">
                @foreach (var angle in AngleValues.OrderBy(a => FormatAngleName(a.Key)))
                {
                    var valueInfo = angle.Value;
                    var isInconsistent = valueInfo.IsInconsistent;
                    var angleId = FormatAngleName(angle.Key);
                    <div id="angle-@angleId"
                        class="value-item flex items-center justify-between p-3 rounded-lg border transition-all duration-200 cursor-pointer hover:shadow-md"
                        style="@(isInconsistent ? $"border-color: var(--error-border); background-color: var(--error-bg);" : $"border-color: var(--border-primary); background-color: var(--bg-tertiary);") box-shadow: var(--shadow-sm);"
                        @onclick="@(() => OnValueClickInternal(angleId, $"angle-{angleId}"))">
                        <div class="flex items-center space-x-3">
                            <div class="angle-icon w-8 h-8 rounded-full flex items-center justify-center"
                                 style="@(isInconsistent ? $"background-color: var(--error-bg); border: 1px solid var(--error-border);" : $"background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary)); box-shadow: var(--neon-glow);")">
                                @if (isInconsistent)
                                {
                                    <!-- Error icon -->
                                    <svg class="w-5 h-5" style="color: var(--error-text);" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                }
                                else
                                {
                                    <!-- Energy bolt icon -->
                                    <svg class="w-5 h-5" style="color: white;" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                    </svg>
                                }
                            </div>
                            <div>
                                <div class="font-medium" style="color: var(--text-primary);">∠@angleId</div>
                                @if (isInconsistent)
                                {
                                    <div class="text-xs" style="color: var(--error-text);">Multiple values detected
                                    </div>
                                }
                                else if (valueInfo.AllValues.Count > 1)
                                {
                                    <div class="text-xs"
                                         style="color: var(--accent-primary);">@(valueInfo.AllValues.Count) calculations
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="value font-mono text-sm"
                             style="color: @(isInconsistent ? "var(--error-text)" : "var(--text-secondary)");">
                            @if (isInconsistent)
                            {
                                <span class="font-bold" style="color: var(--error-accent);">??°</span>
                            }
                            else
                            {
                                <span>@valueInfo.DisplayValue.ToString("F1")°</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    @if (SegmentValues.Any())
    {
        <div class="segments-section">
            <h4 class="text-sm font-semibold mb-3 flex items-center" style="color: var(--text-secondary);">
                <svg class="w-4 h-4 mr-2" style="color: var(--segment-color);" fill="none" stroke="currentColor"
                     viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                </svg>
                Segments
            </h4>
            <div class="space-y-2">
                @foreach (var segment in SegmentValues.OrderBy(s => FormatSegmentName(s.Key)))
                {
                    var valueInfo = segment.Value;
                    var isInconsistent = valueInfo.IsInconsistent;
                    var segmentId = FormatSegmentName(segment.Key);
                    <div id="segment-@segmentId"
                        class="value-item flex items-center justify-between p-3 rounded-lg border transition-all duration-200 cursor-pointer hover:shadow-md"
                        style="@(isInconsistent ? $"border-color: var(--error-border); background-color: var(--error-bg);" : $"border-color: var(--border-primary); background-color: var(--bg-tertiary);") box-shadow: var(--shadow-sm);"
                        @onclick="@(() => OnValueClickInternal(segmentId, $"segment-{segmentId}"))">
                        <div class="flex items-center space-x-3">
                            <div class="segment-icon w-8 h-8 rounded-full flex items-center justify-center"
                                 style="@(isInconsistent ? $"background-color: var(--error-bg); border: 1px solid var(--error-border);" : $"background-color: var(--segment-color); box-shadow: 0 0 20px var(--segment-color);")">
                                @if (isInconsistent)
                                {
                                    <!-- Error icon -->
                                    <svg class="w-5 h-5" style="color: var(--error-text);" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                }
                                else
                                {
                                    <!-- Right arrow chevron icon -->
                                    <svg class="w-5 h-5" style="color: white;" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                                    </svg>
                                }
                            </div>
                            <div>
                                <div class="font-medium" style="color: var(--text-primary);">@segmentId</div>
                                @if (isInconsistent)
                                {
                                    <div class="text-xs" style="color: var(--error-text);">Multiple values detected
                                    </div>
                                }
                                else if (valueInfo.AllValues.Count > 1)
                                {
                                    <div class="text-xs"
                                         style="color: var(--segment-color);">@(valueInfo.AllValues.Count) calculations
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="value font-mono text-sm"
                             style="color: @(isInconsistent ? "var(--error-text)" : "var(--text-secondary)");">
                            @if (isInconsistent)
                            {
                                <span class="font-bold" style="color: var(--error-accent);">??</span>
                            }
                            else
                            {
                                <span>@valueInfo.DisplayValue.ToString("F2")</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    @if (!AngleValues.Any() && !SegmentValues.Any())
    {
        <div class="empty-state text-center py-8">
            <div class="w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center"
                 style="background-color: var(--bg-accent); border: 1px solid var(--border-primary);">
                <svg class="w-8 h-8" style="color: var(--text-muted);" fill="none" stroke="currentColor"
                     viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                </svg>
            </div>
            <h3 class="text-lg font-medium mb-2" style="color: var(--text-primary);">No Values Computed</h3>
            <p style="color: var(--text-tertiary);">Adjust the angle slider to compute triangle values</p>
        </div>
    }
</div>

@code {
    [Parameter] public Dictionary<Angle, ValueInfo> AngleValues { get; set; } = new();
    [Parameter] public Dictionary<Segment, ValueInfo> SegmentValues { get; set; } = new();
    [Parameter] public EventCallback<(string ValueId, double X, double Y)> OnValueClick { get; set; }

    private ElementReference containerElement;

    private string FormatAngleName(Angle angle) => $"{angle.P1.Content}{angle.Vertex.Content}{angle.P2.Content}";

    private string FormatSegmentName(Segment segment)
    {
        var p1 = segment.P1.Content;
        var p2 = segment.P2.Content;
        return string.CompareOrdinal(p1, p2) < 0 ? $"{p1}{p2}" : $"{p2}{p1}";
    }

    private async Task OnValueClickInternal(string valueId, string elementId)
    {
        try
        {
            // Get the bounding rectangle of the clicked element
            var bounds = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRectById", elementId);
            // Position the modal at the center of the clicked element
            var screenX = bounds.Left + (bounds.Width / 2); // Center horizontally
            var screenY = bounds.Top + (bounds.Height / 2); // Center vertically
            await OnValueClick.InvokeAsync((valueId, screenX, screenY));
        }
        catch
        {
            // Fallback to default position if JS call fails
            await OnValueClick.InvokeAsync((valueId, 400, 300));
        }
    }

} 
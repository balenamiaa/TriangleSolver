@using Microsoft.AspNetCore.Components.Web

<div class="angle-slider-container">
    <label class="block text-sm font-medium text-gray-700 mb-2">@Label</label>

    <div class="relative">
        <!-- Slider Track -->
        <div class="slider-track relative h-2 bg-gray-200 rounded-full">
            <!-- Progress Track -->
            <div
                class="slider-progress h-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full transition-all duration-200"
                style="width: @(((Value - Min) / (Max - Min)) * 100)%"></div>

            <!-- Angle Ticks -->
            <div class="absolute inset-0">
                @foreach (var tick in AngleTicks)
                {
                    var position = ((tick.Value - Min) / (Max - Min)) * 100;
                    <div class="absolute top-0 transform -translate-x-1/2"
                         style="left: @(position)%">
                        <div class="w-0.5 h-6 bg-gray-400 -mt-2"></div>
                        <div class="text-xs text-gray-600 mt-1 transform -translate-x-1/2 font-medium">
                            @(tick.Value)°
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Slider Thumb -->
        <input type="range"
               value="@Value"
               @oninput="OnInputImmediate"
               @onchange="OnInputChanged"
               min="@Min"
               max="@Max"
               step="0.1"
               class="slider-input absolute top-0 w-full h-2 opacity-0 cursor-pointer"/>

        <!-- Custom Thumb -->
        <div
            class="slider-thumb absolute top-1/2 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none"
            style="left: @(((Value - Min) / (Max - Min)) * 100)%">
            <div
                class="w-6 h-6 bg-white border-4 border-blue-500 rounded-full shadow-lg hover:scale-110 transition-transform duration-200">
                <div class="absolute -top-8 left-1/2 transform -translate-x-1/2">
                    <div class="bg-gray-800 text-white px-2 py-1 rounded text-xs font-medium whitespace-nowrap">
                        @Value.ToString("F1")°
                    </div>
                    <div class="w-2 h-2 bg-gray-800 transform rotate-45 mx-auto -mt-1"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .angle-slider-container {
        @@apply w-full;
    }

    .slider-track {
        @@apply relative;
    }

    .slider-input::-webkit-slider-thumb {
        @@apply appearance-none w-6 h-6 cursor-pointer;
    }

    .slider-input::-moz-range-thumb {
        @@apply appearance-none w-6 h-6 cursor-pointer border-0 bg-transparent;
    }

    .slider-thumb:hover .bg-white {
        @@apply scale-110;
    }
</style>

@code {
    [Parameter] public double Value { get; set; } = 30.0;
    [Parameter] public EventCallback<double> ValueChanged { get; set; }
    [Parameter] public EventCallback<double> OnValueChanged { get; set; }
    [Parameter] public double Min { get; set; } = 0;
    [Parameter] public double Max { get; set; } = 120;
    [Parameter] public string Label { get; set; } = "Angle";

    private readonly List<(double Value, string Label)> AngleTicks =
    [
        (0, "0"),
        (30, "30"),
        (45, "45"),
        (60, "60"),
        (90, "90"),
        (120, "120")
    ];

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        // Handle final value change (onchange event)
        if (double.TryParse(e.Value?.ToString(), out var newValue))
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(Value);
            
            if (OnValueChanged.HasDelegate)
            {
                await OnValueChanged.InvokeAsync(Value);
            }
        }
    }

    private async Task OnInputImmediate(ChangeEventArgs e)
    {
        // Handle immediate input changes for visual feedback (oninput event)
        if (double.TryParse(e.Value?.ToString(), out var newValue))
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(Value);
            StateHasChanged();
        }
    }
} 
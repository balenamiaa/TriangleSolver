@using Ranja.Client.Services
@using Ranja.Client.Models

<div class="popup-container pointer-events-none" 
     style="position: fixed; left: @(GetX())px; top: @(GetY())px; transform: translate(-50%, calc(-100% - 10px)); pointer-events: none;">
    
    <div class="popup-content bg-white rounded-lg shadow-lg border border-gray-200 p-4 max-w-xs pointer-events-auto">
        <!-- Header -->
        <div class="popup-header flex items-center justify-between mb-3">
            <h3 class="text-sm font-semibold text-gray-900">Value Details</h3>
            <button @onclick="OnClose" 
                    class="text-gray-400 hover:text-gray-600 transition-colors duration-200">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <!-- Value Info -->
        @if (ValueData != null)
        {
            <div class="value-info space-y-3">
                <!-- Main Value -->
                <div class="main-value text-center p-3 @(ValueData.IsInconsistent ? "bg-red-50 border border-red-200" : "bg-blue-50 border border-blue-200") rounded-lg">
                    <div class="value-name text-xs font-medium text-gray-600 mb-1">
                        @FormatValueName(ValueData.Id)
                    </div>
                    <div class="value-amount text-lg font-bold @(ValueData.IsInconsistent ? "text-red-600" : "text-blue-600")">
                        @if (IsAngle(ValueData.Id))
                        {
                            @($"{ValueData.Value:F1}°")
                        }
                        else
                        {
                            @($"{ValueData.Value:F2}")
                        }
                    </div>
                    @if (ValueData.IsInconsistent)
                    {
                        <div class="inconsistent-badge inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 mt-1">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            Inconsistent
                        </div>
                    }
                </div>

                <!-- Computation Details -->
                <div class="computation-details">
                    <h4 class="text-xs font-semibold text-gray-800 mb-1">Computation:</h4>
                    <div class="computation-reason p-2 bg-gray-50 rounded border">
                        <div class="text-xs text-gray-700">
                            @ValueData.Reason
                        </div>
                    </div>
                </div>

                <!-- Value Type Info -->
                <div class="value-type-info">
                    <div class="flex items-center justify-center">
                        @if (IsAngle(ValueData.Id))
                        {
                            <div class="type-badge inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                <span class="mr-1">∠</span>
                                Angle
                            </div>
                        }
                        else
                        {
                            <div class="type-badge inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                <span class="mr-1">—</span>
                                Segment
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    
    <!-- Popup Arrow -->
    <div class="popup-arrow absolute left-1/2 transform -translate-x-1/2 top-full pointer-events-none">
        <div class="w-3 h-3 bg-white border-r border-b border-gray-200 transform rotate-45 -mt-1.5"></div>
    </div>
</div>

@code {
    [Parameter] public ModalInfo Modal { get; set; } = null!;
    [Parameter] public EventCallback OnClose { get; set; }

    private ValuePopupData? ValueData => Modal.Data as ValuePopupData;

    private double GetX()
    {
        return Modal.Options.X ?? 0;
    }

    private double GetY()
    {
        return Modal.Options.Y ?? 0;
    }

    private string FormatValueName(string valueId)
    {
        if (IsAngle(valueId))
        {
            return $"∠{valueId}";
        }
        return valueId;
    }

    private bool IsAngle(string valueId)
    {
        // Simple heuristic: angles typically have 3 characters (like "ABC")
        // Segments typically have 2 characters (like "AB")
        return valueId.Length == 3;
    }
} 
<div class="value-popup @(isVisible ? "block" : "hidden")"
     style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 9999; pointer-events: none;">
    <div class="popup-container absolute pointer-events-auto"
         style="left: @(Position.X)px; top: @(Position.Y)px; transform: translate(-50%, calc(-100% - 10px));">

        <div class="popup-content rounded-lg shadow-lg p-4 max-w-md"
             style="background-color: var(--bg-secondary); border: 1px solid var(--border-primary); box-shadow: var(--shadow-xl);">
            <!-- Header -->
            <div class="popup-header flex items-center justify-between mb-3">
                <h3 class="text-sm font-semibold" style="color: var(--text-primary);">Value Details</h3>
                <button @onclick="ClosePopup"
                        class="transition-colors duration-200" style="color: var(--text-muted);"
                        onmouseover="this.style.color='var(--text-secondary)'"
                        onmouseout="this.style.color='var(--text-muted)'">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Value Info -->
            @if (ValueData != null)
            {
                <div class="value-info space-y-3">
                    <!-- Value Name and Type -->
                    <div class="value-header text-center p-3 rounded-lg"
                         style="@(ValueData.IsInconsistent ? $"background-color: var(--error-bg); border: 1px solid var(--error-border);" : $"background-color: var(--bg-tertiary); border: 1px solid var(--border-primary);")">
                        <div class="value-name text-sm font-medium mb-1" style="color: var(--text-secondary);">
                            @FormatValueName(ValueData.Id)
                        </div>

                        @if (ValueData.IsInconsistent)
                        {
                            <div
                                class="inconsistent-badge inline-flex items-center px-3 py-1 rounded-full text-sm font-medium"
                                style="background-color: var(--error-bg); color: var(--error-text); border: 1px solid var(--error-border);">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                Multiple Conflicting Values
                            </div>
                        }
                        else
                        {
                            <div class="main-value text-lg font-bold"
                                 style="color: @(ValueData.IsInconsistent ? "var(--error-accent)" : "var(--accent-primary)");">
                                @if (ValueData.IsAngle)
                                {
                                    @($"{ValueData.Values.First():F1}°")
                                }
                                else
                                {
                                    @($"{ValueData.Values.First():F2}")
                                }
                            </div>
                        }
                    </div>

                    <!-- All Values and Computations -->
                    <div class="all-values">
                        <h4 class="text-xs font-semibold mb-2" style="color: var(--text-primary);">
                            @if (ValueData.IsInconsistent)
                            {
                                <span>Conflicting Values (@ValueData.AllValueDetails.Count):</span>
                            }
                            else if (ValueData.AllValueDetails.Count > 1)
                            {
                                <span>Multiple Confirmations (@ValueData.AllValueDetails.Count):</span>
                            }
                            else
                            {
                                <span>Computation:</span>
                            }
                        </h4>

                        <div class="values-list space-y-2 max-h-48 overflow-y-auto">
                            @foreach (var (valueDetail, index) in ValueData.AllValueDetails.Select((v, i) => (v, i)))
                            {
                                var isDistinct = ValueData.IsInconsistent &&
                                                     ValueData.AllValueDetails.Take(index).All(vd => Math.Abs(vd.Value - valueDetail.Value) > 0.001);

                                <div class="value-detail p-2 rounded"
                                     style="@(isDistinct ? $"background-color: var(--error-bg); border: 1px solid var(--error-border);" : $"background-color: var(--bg-tertiary); border: 1px solid var(--border-secondary);")">
                                    <div class="flex items-center justify-between mb-1">
                                        <div class="value-number text-sm font-medium"
                                             style="color: @(isDistinct ? "var(--error-accent)" : "var(--text-primary)");">
                                            @if (ValueData.IsAngle)
                                            {
                                                @($"{valueDetail.Value:F1}°")
                                            }
                                            else
                                            {
                                                @($"{valueDetail.Value:F2}")
                                            }
                                        </div>
                                        @if (isDistinct)
                                        {
                                            <span class="text-xs px-2 py-1 rounded-full"
                                                  style="background-color: var(--error-bg); color: var(--error-text); border: 1px solid var(--error-border);">Conflict</span>
                                        }
                                        else if (index > 0)
                                        {
                                            <span class="text-xs px-2 py-1 rounded-full"
                                                  style="background-color: var(--success-bg); color: var(--success-text); border: 1px solid var(--success-border);">Confirms</span>
                                        }
                                    </div>
                                    <div class="computation-reason text-xs" style="color: var(--text-secondary);">
                                        @valueDetail.Reason
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Value Type Info -->
                    <div class="value-type-info">
                        <div class="flex items-center justify-center">
                            @if (ValueData.IsAngle)
                            {
                                <div
                                    class="type-badge inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                                    style="background-color: var(--bg-tertiary); color: var(--accent-primary); border: 1px solid var(--border-primary);">
                                    <span class="mr-1">∠</span>
                                    Angle
                                </div>
                            }
                            else
                            {
                                <div
                                    class="type-badge inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                                    style="background-color: var(--bg-tertiary); color: var(--segment-color); border: 1px solid var(--border-primary);">
                                    <span class="mr-1">—</span>
                                    Segment
                                </div>
                            }
                        </div>
                    </div>

                    @if (ValueData.IsInconsistent)
                    {
                        <div class="inconsistency-note p-2 rounded"
                             style="background-color: var(--warning-bg); border: 1px solid var(--warning-border);">
                            <div class="text-xs" style="color: var(--warning-text);">
                                <strong>Note:</strong> This value has multiple conflicting derivations. This suggests an
                                inconsistency in the geometric constraints or input values.
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Popup Arrow -->
        <div class="popup-arrow absolute left-1/2 transform -translate-x-1/2 top-full">
            <div class="w-3 h-3 transform rotate-45 -mt-1.5"
                 style="background-color: var(--bg-secondary); border-right: 1px solid var(--border-primary); border-bottom: 1px solid var(--border-primary);"></div>
        </div>
    </div>
</div>

@code {
    [Parameter] public object? Value { get; set; }
    [Parameter] public (double X, double Y) Position { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private bool isVisible = false;
    private ValuePopupData? ValueData => Value as ValuePopupData;

    public async Task Show()
    {
        isVisible = true;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task ClosePopup()
    {
        isVisible = false;
        StateHasChanged();
        await OnClose.InvokeAsync();
    }

    private string FormatValueName(string valueId)
    {
        if (IsAngle(valueId))
        {
            return $"∠{valueId}";
        }

        return valueId;
    }

    private bool IsAngle(string valueId)
    {
        // Simple heuristic: angles typically have 3 characters (like "ABC")
        // Segments typically have 2 characters (like "AB")
        return valueId.Length == 3;
    }

} 